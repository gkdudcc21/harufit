import React, { useState, useEffect, useRef } from 'react';
import apiClient from '../../api/apiClient'; // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ import
import './ManagerChat.css';

export default function ManagerChat({ mode, shouldFocusInput }) {
    // ‚úÖ [ÏàòÏ†ï] Ï≤´ Î©îÏãúÏßÄÎäî useEffectÏóêÏÑú ÎãâÎÑ§ÏûÑÍ≥º Ìï®Íªò ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÌïòÎØÄÎ°ú Ï¥àÍ∏∞ ÏÉÅÌÉúÎ•º ÎπÑÏõÅÎãàÎã§.
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);

    // ‚úÖ Î™®ÎìúÎ≥Ñ ÏÑ§Î™ÖÏùÑ ÏúÑÌïú Í∞ùÏ≤¥ Ï∂îÍ∞Ä
    const modeDescriptions = {
        easy: "Ìé∏ÏïàÌïú ÏãúÏûë",
        normal: "Íæ∏Ï§ÄÌïú Í¥ÄÎ¶¨",
        hard: "Í∞ïÎ†•Ìïú Î≥ÄÌôî",
    };

    // ‚úÖ [ÏàòÏ†ï] useEffectÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï≤òÏùå Î°úÎî©Îê† Îïå ÌôòÏòÅ Î©îÏãúÏßÄÎì§ÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§.
    useEffect(() => {
        const userNickname = localStorage.getItem('userNickname') || 'Í≤åÏä§Ìä∏';
        const userMode = localStorage.getItem('userMode') || 'normal';
        const welcomeMessage = {
            sender: 'ai',
            text: `ÏïàÎÖïÌïòÏÑ∏Ïöî! ${userNickname}Îãò, ÌïòÎ£®ÌïèÍ≥º Ìï®Íªò Í±¥Í∞ïÌï¥Ïßà Ï§ÄÎπÑ ÎêòÏÖ®ÎÇòÏöî?`
        };
        // Î©îÏãúÏßÄ ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
        setMessages([welcomeMessage]);

        // 1Ï¥à ÌõÑÏóê Î™®ÎìúÏóê ÎåÄÌïú ÏÑ§Î™Ö Î©îÏãúÏßÄÎ•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
        const timer = setTimeout(() => {
            const modeInfoMessage = {
                sender: 'ai',
                text: `'${userMode.toUpperCase()}' Î™®ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÖ®Íµ∞Ïöî. '${modeDescriptions[userMode]}'Î•º Î™©ÌëúÎ°ú Ìï®Íªò ÎÇòÏïÑÍ∞ÄÏöî!`
            };
            setMessages(prevMessages => [...prevMessages, modeInfoMessage]);
        }, 1000); // 1Ï¥à ÏßÄÏó∞

        return () => clearTimeout(timer); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨

    }, []); // Îπà Î∞∞Ïó¥ÏùÑ Ï†ÑÎã¨ÌïòÏó¨ Ïù¥ Ìö®Í≥ºÍ∞Ä Ìïú Î≤àÎßå Ïã§ÌñâÎêòÎèÑÎ°ù Ìï©ÎãàÎã§.


    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(scrollToBottom, [messages]);

    // ‚úÖ shouldFocusInput Î°úÏßÅÏùÄ ÌòÑÏû¨ ÌååÏùºÏóê ÏóÜÏúºÎØÄÎ°ú, Í∏∞Î≥∏ Ìè¨Ïª§Ïä§ Î°úÏßÅÎßå Ïú†ÏßÄÌï©ÎãàÎã§.
    useEffect(() => {
        if (!isLoading) {
            inputRef.current?.focus();
        }
    }, [isLoading]);


    const handleSendMessage = async (e) => {
        e.preventDefault();
        if (!input.trim() || isLoading) return;

        const userMessage = { sender: 'user', text: input };

        const historyForApi = messages.map(msg => ({
            role: msg.sender === 'ai' ? 'assistant' : 'user',
            content: msg.text
        }));

        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);

        try {
            // ‚úÖ [ÌïµÏã¨ ÏàòÏ†ï] API Ìò∏Ï∂ú Ï£ºÏÜåÎ•º ÏµúÏã† Í∏∞Îä•Ïù∏ '/ai/parse-and-log'Î°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
            const response = await apiClient.post('/ai/parse-and-log', {
                message: userMessage.text,
                history: historyForApi,
            });

            // 1. AIÏùò ÎåÄÌôî ÏùëÎãµÏùÑ Î®ºÏ†Ä Ï∂îÍ∞ÄÌï©ÎãàÎã§.
            const aiReplyMessage = { sender: 'ai', text: response.data.reply };
            setMessages(prev => [...prev, aiReplyMessage]);

            // 2. ‚úÖ [ÌïµÏã¨ ÏàòÏ†ï] Î∞±ÏóîÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÎã§Î©¥, ÌôïÏù∏ Î©îÏãúÏßÄÎ•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
            if (response.data.savedData && response.data.savedData.length > 0) {
                // 0.5Ï¥à ÌõÑÏóê "Í∏∞Î°ùÌñàÏñ¥Ïöî!" Î©îÏãúÏßÄÎ•º ÎùÑÏõåÏÑú ÏûêÏó∞Ïä§ÎüΩÍ≤å Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
                setTimeout(() => {
                    const successLogMessage = { sender: 'ai', text: 'ÎßêÏîÄÌïòÏã† ÎÇ¥Ïö©ÏùÑ Î∞îÌÉïÏúºÎ°ú ÏãùÎã®/Ïö¥Îèô Ï†ïÎ≥¥Î•º Í∏∞Î°ùÌñàÏñ¥Ïöî! üëç' };
                    setMessages(prev => [...prev, successLogMessage]);
                }, 500);
            }

        } catch (error) {
            const errorMessage = { sender: 'ai', text: 'Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ ÎãµÎ≥ÄÌïòÍ∏∞ Ïñ¥Î†§ÏõåÏöî.' };
            setMessages(prev => [...prev, errorMessage]);
            console.error("AI Ï±ÑÌåÖ Ïò§Î•ò:", error);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="manager-chat-container">
            <div className={`manager-card-header ${mode}-theme`}>ÌïòÎ£®Ìïè AI Îß§ÎãàÏ†Ä</div>
            <div className="chat-messages">
                {messages.map((msg, index) => (
                    <div key={index} className={`message ${msg.sender}`}>
                        <div className="bubble">{msg.text}</div>
                    </div>
                ))}
                {isLoading && (
                    <div className="message ai">
                        <div className="bubble typing-indicator">
                            <span></span><span></span><span></span>
                        </div>
                    </div>
                )}
                <div ref={messagesEndRef} />
            </div>
            <form className="chat-input-form" onSubmit={handleSendMessage}>
                <input
                    ref={inputRef}
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                    disabled={isLoading}
                    className="chat-input"
                />
                <button type="submit" disabled={isLoading} className="chat-send-btn">Ï†ÑÏÜ°</button>
            </form>
        </div>
    );
}